import { ActionTags, IProtocolDefinitionMap, ProtocolType } from "../types";

export const protocols: IProtocolDefinitionMap = {
  rhinofi: {
    identifier: "rhinofi",
    name: "RhinoFi",
    twitter: "https://x.com/rhinofi",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/rhinologo.png",
    website: "https://rhino.fi/",
    type: ProtocolType.CROSS_CHAIN_BRIDGE,
    actionTags: [ActionTags.BRIDGE],
  },
  uniswap: {
    identifier: "uniswap",
    name: "Uniswap",
    twitter: "https://x.com/Uniswap",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/uniswap.png",
    website: "https://uniswap.org/",
    type: ProtocolType.DEX,
    actionTags: [ActionTags.SWAP],
  },
  odos: {
    identifier: "odos",
    name: "Odos",
    twitter: "https://x.com/odosprotocol",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/odos.png",
    website: "https://www.odos.xyz/",
    type: ProtocolType.DEX_AGGREGGATOR,
    actionTags: [ActionTags.SWAP],
  },
  across: {
    identifier: "across",
    name: "Across",
    twitter: "https://x.com/AcrossProtocol",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/across.png",
    website: "https://across.to/",
    type: ProtocolType.CROSS_CHAIN_BRIDGE,
    actionTags: [ActionTags.BRIDGE],
  },
  debridge: {
    identifier: "debridge",
    name: "Debridge",
    twitter: "https://x.com/deBridgeFinance",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/debridge.png",
    website: "https://app.debridge.finance/",
    type: ProtocolType.CROSS_CHAIN_BRIDGE,
    actionTags: [ActionTags.BRIDGE],
  },
  aerodrome: {
    identifier: "aerodrome",
    name: "Aerodrome",
    twitter: "https://x.com/AerodromeFi",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/aerodrome.png",
    website: "https://aerodrome.finance/",
    type: ProtocolType.DEX,
    actionTags: [ActionTags.SWAP],
  },
  pancakeswap: {
    identifier: "pancakeswap",
    name: "Pancakeswap",
    twitter: "https://x.com/PancakeSwap",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/pancakeswap.png",
    website: "https://pancakeswap.finance/",
    type: ProtocolType.DEX,
    actionTags: [ActionTags.SWAP],
  },
  cowswap: {
    identifier: "cowswap",
    name: "Cowswap",
    twitter: "https://x.com/CoWSwap",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/cowswap.png",
    website: "https://swap.cow.fi/",
    type: ProtocolType.DEX_AGGREGGATOR,
    actionTags: [ActionTags.SWAP],
  },
  paraswap: {
    identifier: "paraswap",
    name: "Paraswap",
    twitter: "https://x.com/parasvwap",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/paraswap.png",
    website: "https://www.paraswap.xyz/",
    type: ProtocolType.DEX_AGGREGGATOR,
    actionTags: [ActionTags.SWAP],
  },
  sushiswap: {
    identifier: "sushiswap",
    name: "Sushiswap",
    twitter: "https://x.com/SushiSwap",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/sushiswap.png",
    website: "https://www.sushi.com/",
    type: ProtocolType.DEX,
    actionTags: [ActionTags.SWAP],
  },
  bungee: {
    identifier: "bungee",
    name: "Bungee",
    twitter: "https://x.com/BungeeExchange",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/bungee.png",
    website: "https://www.bungee.exchange/",
    type: ProtocolType.CROSS_CHAIN_BRIDGE,
    actionTags: [ActionTags.BRIDGE],
  },
  curve: {
    identifier: "curve",
    name: "Curve",
    twitter: "https://x.com/CurveFinance",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/curve.png",
    website: "https://curve.fi/dex/",
    type: ProtocolType.DEX,
    actionTags: [ActionTags.SWAP],
  },
  dodo: {
    identifier: "dodo",
    name: "Dodo",
    twitter: "https://x.com/BreederDodo",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/dodo.png",
    website: "https://app.dodoex.io/",
    type: ProtocolType.DEX,
    actionTags: [ActionTags.SWAP],
  },
  kaito: {
    identifier: "kaito",
    name: "Kaito",
    twitter: "https://x.com/KaitoAI",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/kaito.png",
    website: "https://www.kaito.ai/",
    type: ProtocolType.DATA_ANALYTICS,
    actionTags: [],
  },
  safe: {
    identifier: "safe",
    name: "Safe",
    twitter: "https://x.com/safe",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/safe.png",
    website: "https://safe.global/",
    type: ProtocolType.WALLET,
    actionTags: [],
  },
  dydx: {
    identifier: "dydx",
    name: "dYdX",
    twitter: "https://x.com/dYdX",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/dydx.png",
    website: "https://www.dydx.xyz/",
    type: ProtocolType.TRADING_PLATFORM,
    actionTags: [],
  },
  hop: {
    identifier: "hop",
    name: "Hop Exchange",
    twitter: "https://x.com/HopProtocol",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/hop.png",
    website: "https://hop.exchange/",
    type: ProtocolType.CROSS_CHAIN_BRIDGE,
    actionTags: [ActionTags.BRIDGE],
  },
  oneinch: {
    identifier: "oneinch",
    name: "Oneinch",
    twitter: "https://x.com/1inch",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/1inch.png",
    website: "https://1inch.io/",
    type: ProtocolType.DEX_AGGREGGATOR,
    actionTags: [ActionTags.SWAP],
  },
  arkham: {
    identifier: "arkham",
    name: "Arkham",
    twitter: "https://x.com/arkham",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/arkham.png",
    website: "https://intel.arkm.com/",
    type: ProtocolType.DATA_ANALYTICS,
    actionTags: [],
  },
  gitcoin: {
    identifier: "gitcoin",
    name: "Gitcoin",
    twitter: "https://x.com/gitcoin",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/gitcoin.png",
    website: "https://www.gitcoin.co/",
    type: ProtocolType.GRANTS,
    actionTags: [],
  },
  galxe: {
    identifier: "galxe",
    name: "Galxe",
    twitter: "https://x.com/Galxe",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/galxe.png",
    website: "https://www.galxe.com/",
    type: ProtocolType.QUESTING_PLATFORM,
    actionTags: [],
  },
  etherfi: {
    identifier: "etherfi",
    name: "Etherfi",
    twitter: "https://x.com/ether_fi",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/etherfi.png",
    website: "https://www.ether.fi/",
    type: ProtocolType.STAKING,
    actionTags: [],
  },
  ens: {
    identifier: "ens",
    name: "ENS",
    twitter: "https://x.com/ensdomains",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/ethereum_name_service.png",
    website: "https://ens.domains/",
    type: ProtocolType.DOMAIN_SERVICE,
    actionTags: [],
  },
  ethena: {
    identifier: "ethena",
    name: "Ethena",
    twitter: "https://x.com/ethena_labs",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/ethena.png",
    website: "https://ethena.fi/",
    type: ProtocolType.STAKING,
    actionTags: [],
  },
  eigen: {
    identifier: "eigen",
    name: "EigenLayer",
    twitter: "https://x.com/eigenlayer",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/eigen.png",
    website: "https://www.eigenlayer.xyz/",
    type: ProtocolType.INFRA,
    actionTags: [],
  },
  layerzero: {
    identifier: "layerzero",
    name: "LayerZero",
    twitter: "https://x.com/LayerZero_Core",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/layerzero.png",
    website: "https://layerzero.network/",
    type: ProtocolType.MESSAGING_PROTOCOL,
    actionTags: [],
  },
  lynex: {
    identifier: "lynex",
    name: "Lynex",
    twitter: "https://x.com/LynexFi",
    logo: "https://storage-mercle-prod.s3.amazonaws.com/public/protocol-logos/lynex.png",
    website: "https://app.lynex.fi/swap",
    type: ProtocolType.DEX,
  },
};
